grammar;

use crate::frontend::ast::*;

// Lexical
match {
    r"\s*" => {}, // skip whitespace
    r"//[^\n\r]*[\n\r]*" => {}, // skip single-line comment
    r"/\*([^*]|\*[^/])*\*/" => {}, // skip multi-line comment
    _
}

Comma<T>: Vec<T> = {
    <head: T> <tail: ("," <T>)*> => {
        let mut v = vec![head];
        v.extend(tail);
        v
    }
}

// Syntax
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => FuncDef { <> }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <items: BlockItem*> "}" => Block { <> };

BlockItem: BlockItem = {
    <decl: Decl> => BlockItem::Decl(decl),
    <stmt: Stmt> => BlockItem::Stmt(stmt),
}

// Declaration

// Decl ::= ConstDecl
Decl: Decl = {
    <const_decl: ConstDecl> => Decl::ConstDecl(const_decl),
    <var_decl: VarDecl> => Decl::VarDecl(var_decl),
}

ConstDecl: ConstDecl = {
    "const" <btype: BType> <defs: Comma<ConstDef>> ";" => ConstDecl { <> }
}

ConstDef: ConstDef = {
    <ident: Ident> "=" <init_val: ConstInitVal> => ConstDef { <> }
}

ConstInitVal: ConstInitVal = {
    <expr: ConstExp> => ConstInitVal::Expr(expr),
}

VarDecl: VarDecl = {
    <btype: BType> <defs: Comma<VarDef>> ";" => VarDecl { <> }
}

VarDef: VarDef = {
    <ident: Ident> => VarDef::Ident(ident),
    <ident: Ident> "=" <expr: Exp> => VarDef::Init(ident, expr),
}

VarInitVal: InitVal = {
    <expr: Exp> => InitVal::Expr(expr),
}

BType: BType = {
    "int" => BType::Int,
}

Stmt: Stmt = {
    <open_stmt: OpenStmt> => open_stmt,
    <closed_stmt: ClosedStmt> => closed_stmt,
}

OpenStmt: Stmt = {
    "if" "(" <cond: Exp> ")" <then_stmt: ClosedStmt> "else" <else_stmt: OpenStmt> => Stmt::IfElse(cond, Box::new(then_stmt), Box::new(else_stmt)),
    "if" "(" <cond: Exp> ")" <then_stmt: Stmt> => Stmt::If(cond, Box::new(then_stmt)),
    "while" "(" <cond: Exp> ")" <body: OpenStmt> => Stmt::While(cond, Box::new(body)),
}

ClosedStmt: Stmt = {
    <non_if_stmt: NonIfStmt> => non_if_stmt,
    "if" "(" <cond: Exp> ")" <then_stmt: ClosedStmt> "else" <else_stmt: ClosedStmt> => Stmt::IfElse(cond, Box::new(then_stmt), Box::new(else_stmt)),
    "while" "(" <cond: Exp> ")" <body: ClosedStmt> => Stmt::While(cond, Box::new(body)),
}

NonIfStmt: Stmt = {
    "return" <expr: Exp> ";" => Stmt::Return(expr),
    <lv: LVal> "=" <expr: Exp> ";" => Stmt::Assign(lv, expr),
    <maybe_expr: Exp?> ";" => {
        match maybe_expr {
            Some(expr) => Stmt::Expr(expr),
            None => Stmt::Empty,
        }
    },
    <block: Block> => Stmt::Block(block),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
}

// Exp ::= LOrExp; At Lv 3.3
Exp: Expr = {
    <lor: LOrExp> => lor,
}

ConstExp: Expr = {
    <expr: Exp> => expr,
}

PrimaryExp: Expr = {
    "(" <expr: Exp> ")" => expr,
    <lval: LVal> => Expr::LVal(lval),
    <num: Number> => Expr::Num(num),
}

UnaryExp: Expr = {
    <primary: PrimaryExp> => primary,
    "+" <unary: UnaryExp> => Expr::Pos(Box::new(unary)),
    "-" <unary: UnaryExp> => Expr::Neg(Box::new(unary)),
    "!" <unary: UnaryExp> => Expr::Not(Box::new(unary)),
}

// MulExp ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
MulExp: Expr = {
    <unary: UnaryExp> => unary,
    <lhs: MulExp> "*" <rhs: UnaryExp> => Expr::Mul(Box::new(lhs), Box::new(rhs)),
    <lhs: MulExp> "/" <rhs: UnaryExp> => Expr::Div(Box::new(lhs), Box::new(rhs)),
    <lhs: MulExp> "%" <rhs: UnaryExp> => Expr::Mod(Box::new(lhs), Box::new(rhs)),
}

// AddExp ::= MulExp | AddExp ("+" | "-") MulExp;
AddExp: Expr = {
    <mul: MulExp> => mul,
    <lhs: AddExp> "+" <rhs: MulExp> => Expr::Add(Box::new(lhs), Box::new(rhs)),
    <lhs: AddExp> "-" <rhs: MulExp> => Expr::Sub(Box::new(lhs), Box::new(rhs)),
}

// RelExp ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
RelExp: Expr = {
    <add: AddExp> => add,
    <lhs: RelExp> "<" <rhs: AddExp> => Expr::Lt(Box::new(lhs), Box::new(rhs)),
    <lhs: RelExp> ">" <rhs: AddExp> => Expr::Gt(Box::new(lhs), Box::new(rhs)),
    <lhs: RelExp> "<=" <rhs: AddExp> => Expr::Le(Box::new(lhs), Box::new(rhs)),
    <lhs: RelExp> ">=" <rhs: AddExp> => Expr::Ge(Box::new(lhs), Box::new(rhs)),
}

// EqExp ::= RelExp | EqExp ("==" | "!=") RelExp;
EqExp: Expr = {
    <rel: RelExp> => rel,
    <lhs: EqExp> "==" <rhs: RelExp> => Expr::Eq(Box::new(lhs), Box::new(rhs)),
    <lhs: EqExp> "!=" <rhs: RelExp> => Expr::Ne(Box::new(lhs), Box::new(rhs)),
}

// LAndExp ::= EqExp | LAndExp "&&" EqExp;
LAndExp: Expr = {
    <eq: EqExp> => eq,
    <lhs: LAndExp> "&&" <rhs: EqExp> => Expr::Land(Box::new(lhs), Box::new(rhs)),
}

// LOrExp ::= LAndExp | LOrExp "||" LAndExp;
LOrExp: Expr = {
    <land: LAndExp> => land,
    <lhs: LOrExp> "||" <rhs: LAndExp> => Expr::Lor(Box::new(lhs), Box::new(rhs)),
}

// `<>` stands for the matched string
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

LVal: LVal = {
    <ident: Ident> => LVal::Ident(ident),
}

Number: i32 = <IntConst>;

// Integer Literal
IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}