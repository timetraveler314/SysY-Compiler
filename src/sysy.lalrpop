grammar;

use crate::frontend::ast::*;

// Lexical
match {
    r"\s*" => {}, // skip whitespace
    r"//[^\n\r]*[\n\r]*" => {}, // skip single-line comment
    r"/\*([^*]|\*[^/])*\*/" => {}, // skip multi-line comment
    _
}

// Syntax
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef { <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <expr: Exp> ";" => Stmt { <> };

Exp: Expr = {
    <unary: UnaryExp> => unary,
}

PrimaryExp: Expr = {
    "(" <expr: Exp> ")" => expr,
    <num: Number> => Expr::Num(num),
}

UnaryExp: Expr = {
    <primary: PrimaryExp> => primary,
    "+" <unary: UnaryExp> => Expr::Pos(Box::new(unary)),
    "-" <unary: UnaryExp> => Expr::Neg(Box::new(unary)),
    "!" <unary: UnaryExp> => Expr::Not(Box::new(unary)),
}

// `<>` stands for the matched string
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Number: i32 = <IntConst>;

// Integer Literal
IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}